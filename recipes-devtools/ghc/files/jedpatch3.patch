From afabd52e95235ab36c5ad7b3473b5d6a4d58360b Mon Sep 17 00:00:00 2001
From: Simon Marlow <marlowsd@gmail.com>
Date: Tue, 10 Aug 2010 13:37:39 +0000
Subject: [PATCH] Run finalizers *after* updating the stable pointer table
 (#4221) Silly bug really, we were running the C finalizers while the
 StablePtr table was still in a partially-updated state during GC, but
 finalizers are allowed to call freeStablePtr() (via hs_free_fun_ptr(), for
 example), and chaos ensues.

Index: ghc-6.12.3/rts/sm/GC.c
===================================================================
--- ghc-6.12.3.orig/rts/sm/GC.c
+++ ghc-6.12.3/rts/sm/GC.c
@@ -750,11 +750,6 @@ SET_GCT(gc_threads[0]);
   // Reset the nursery
   resetNurseries();
 
-  // start any pending finalizers 
-  RELEASE_SM_LOCK;
-  scheduleFinalizers(cap, old_weak_ptr_list);
-  ACQUIRE_SM_LOCK;
-  
   // send exceptions to any threads which were about to die 
   RELEASE_SM_LOCK;
   resurrectThreads(resurrected_threads);
@@ -764,6 +759,17 @@ SET_GCT(gc_threads[0]);
   // Update the stable pointer hash table.
   updateStablePtrTable(major_gc);
 
+  // unlock the StablePtr table.  Must be before scheduleFinalizers(),
+  // because a finalizer may call hs_free_fun_ptr() or
+  // hs_free_stable_ptr(), both of which access the StablePtr table.
+  stablePtrPostGC();
+
+  // Start any pending finalizers.  Must be after
+  // updateStablePtrTable() and stablePtrPostGC() (see #4221).
+  RELEASE_SM_LOCK;
+  scheduleFinalizers(cap, old_weak_ptr_list);
+  ACQUIRE_SM_LOCK;
+
   // check sanity after GC 
   IF_DEBUG(sanity, checkSanity());
 
@@ -795,9 +801,6 @@ SET_GCT(gc_threads[0]);
   slop = calcLiveBlocks() * BLOCK_SIZE_W - live;
   stat_endGC(allocated, live, copied, N, max_copied, avg_copied, slop);
 
-  // unlock the StablePtr table
-  stablePtrPostGC();
-
   // Guess which generation we'll collect *next* time
   initialise_N(force_major_gc);
 
